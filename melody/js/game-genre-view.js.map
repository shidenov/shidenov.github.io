{"version":3,"names":[],"mappings":"","sources":["game-genre-view.js"],"sourcesContent":["import AbstractView from './abstract-view';\nimport {development} from './main';\nimport {getAudioTrack} from './data/music-data';\n\nexport default class GenreView extends AbstractView {\n  constructor(game) {\n    super();\n    this.game = game;\n  }\n\n  get template() {\n    const answers = [];\n    for (let i = 0; this.game.answers.length > i; i++) {\n      const status = (development) ? `<span style=\"color: black\">${this.game.answers[i].result()}</span>` : ``;\n      const item = `\n      <div class=\"genre-answer\">\n        <div class=\"player-wrapper\">\n          <div class=\"player\">\n            <button class=\"player-control player-control--play\"></button>\n            <div class=\"player-track\">\n              <span class=\"player-status\"></span>\n            </div>\n          </div>\n        </div>\n        <input type=\"checkbox\" name=\"answer\" value=\"answer-${i}\" id=\"a-${i}\">\n        <label class=\"genre-answer-check\" for=\"a-${i}\">${status}</label>\n      </div>\n      `;\n\n      item.trim();\n      answers.push(item);\n    }\n\n    return `\n      <section class=\"main main--level main--level-${this.game.gameType}\">\n        <div class=\"main-wrap\">\n          <h2 class=\"title\">${this.game.title}</h2>\n          <form class=\"genre\">\n            ${answers.join(``)}\n            <button class=\"genre-answer-send\" type=\"submit\">Ответить</button>\n          </form>\n        </div>\n      </section>\n    `;\n  }\n\n  onResult() { }\n\n  bind() {\n    const players = this.element.querySelectorAll(`.player`);\n    const audioTracks = [];\n\n    this.game.answers.forEach((answer, i) => {\n      const track = getAudioTrack(answer.src);\n      audioTracks.push(track);\n\n      const buttonControl = players[i].querySelector(`.player-control`);\n      if (i === 0) {\n        track.play();\n        buttonControl.classList.remove(`player-control--play`);\n        buttonControl.classList.add(`player-control--pause`);\n      }\n\n      buttonControl.addEventListener(`click`, (event) => {\n        const e = event || window.event;\n        const target = e.target || e.srcElement;\n\n        // отключать все треки и включать выбранный\n        audioTracks.forEach((audio) => audio.pause());\n        // добавить всем кнопкам класс play\n        for (let player of players) {\n          const control = player.querySelector(`.player-control`);\n          control.classList.remove(`player-control--pause`);\n          control.classList.add(`player-control--play`);\n        }\n\n        if ([...target.classList].indexOf(`player-control--pause`) !== -1) {\n          target.classList.remove(`player-control--pause`);\n          target.classList.add(`player-control--play`);\n        } else {\n          target.classList.remove(`player-control--play`);\n          target.classList.add(`player-control--pause`);\n          track.play();\n        }\n\n        e.preventDefault();\n      });\n    });\n\n    const submitButton = this.element.querySelector(`.genre-answer-send`);\n    submitButton.disabled = true;\n\n    const resultAnswers = {};\n    const answerItems = [...this.element.querySelectorAll(`.genre-answer-check`)];\n\n    for (let item of answerItems) {\n      item.addEventListener(`click`, (event) => {\n        const e = event || window.event;\n        const target = e.target || e.srcElement;\n\n        const currentAnswerIndex = target.control.value.slice(target.control.value.length - 1, target.control.value.length);\n        const result = this.game.answers[currentAnswerIndex].result();\n\n        if (!target.control.checked) {\n          resultAnswers[currentAnswerIndex] = result;\n        } else {\n          delete resultAnswers[currentAnswerIndex];\n        }\n\n        submitButton.disabled = Object.keys(resultAnswers).length === 0;\n      });\n    }\n\n    submitButton.addEventListener(`click`, (e) => {\n      e.preventDefault();\n      for (let key in resultAnswers) {\n        if (!resultAnswers[key]) {\n          return this.onResult(false);\n        }\n      }\n\n      audioTracks.forEach((audio) => audio.pause());\n      return this.onResult(true);\n    });\n  }\n}\n"],"file":"game-genre-view.js"}