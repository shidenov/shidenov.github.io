{"version":3,"names":[],"mappings":"","sources":["game-screen.js"],"sourcesContent":["/* Модуль: Игра на выбор исполнителя */\nimport {renderScreen} from './render-screen';\n\nimport Application from './application';\nimport HeaderView from './game-header-view';\nimport ArtistView from './game-artist-view';\nimport GenreView from './game-genre-view';\nimport ModalConfirmView from './modal-confirm-view';\n\nconst ONE_SECOND = 1000;\n\nexport default class GameScreen {\n  constructor(model) {\n    this.model = model;\n    this.header = null;\n    this.screen = null;\n    this._intervalId = null;\n  }\n\n  updateHeader() {\n    const time = this.header.convertTime();\n    this.header.minElement.textContent = time.min;\n    this.header.secElement.textContent = time.sec;\n\n    const svg = this.header.getSvgAttrOptions();\n    this.header.circleElement.setAttribute(`stroke-dashoffset`, svg.offset);\n\n    if (+time.sec <= 30 && +time.sec % 2 === 0 && +time.min === 0) {\n      this.header.timerElement.style.color = `red`;\n    } else {\n      this.header.timerElement.style.color = ``;\n    }\n  }\n\n  tickTimer() {\n    const timeout = this.model.checkTimerStatus();\n    if (timeout) {\n      this.stopTimer();\n      this.stopGame();\n      return;\n    }\n\n    this._intervalId = setTimeout(() => {\n      this.model.tick();\n      this.tickTimer();\n      this.updateHeader();\n    }, ONE_SECOND);\n  }\n\n  stopTimer() {\n    clearTimeout(this._intervalId);\n  }\n\n  startGame() {\n    const currentGameData = this.model.getLevelGameData();\n    this.gameScreen(currentGameData);\n    this.tickTimer();\n    renderScreen(this.screen.element);\n  }\n\n  stopGame() {\n    this.model.gameResult();\n    Application.showResult(this.model.gameState);\n  }\n\n  gameScreen(currentGameData) {\n    this.header = new HeaderView(this.model.gameState);\n    this.modalConfirm = new ModalConfirmView();\n\n    this.modalConfirm.onClickOk = (event) => {\n      const e = event || window.event;\n      this.stopTimer();\n      Application.showWelcome();\n      document.body.removeChild(this.modalConfirm.element);\n      e.preventDefault();\n    };\n\n    this.modalConfirm.onClickCancel = (event) => {\n      const e = event || window.event;\n      document.body.removeChild(this.modalConfirm.element);\n      e.preventDefault();\n    };\n\n    this.header.onClick = () => {\n      document.body.appendChild(this.modalConfirm.element);\n    };\n\n    if (currentGameData.gameType === `artist`) {\n      this.screen = new ArtistView(currentGameData);\n      this.screen.onResult = (result) => this.changeLevel(result, this.model.gameState);\n    }\n\n    if (currentGameData.gameType === `genre`) {\n      this.screen = new GenreView(currentGameData);\n      this.screen.onResult = (result) => this.changeLevel(result, this.model.gameState);\n    }\n\n    this.screen.element.appendChild(this.header.element);\n  }\n\n  changeLevel(result, game) {\n    this.model.gameState = game;\n\n    if (!result) {\n      this.model.lossLive();\n    }\n\n    this.stopTimer();\n    this.model.addResultAnswer(result);\n    this.model.changeCurrentLevel(); // назначаем новый текущий уровнь\n\n    const nextLevelGameData = this.model.getLevelGameData();\n    const noLives = this.model.checkLives();\n\n    if (!nextLevelGameData) {\n      // вывод результатов закончились все уровни\n      this.stopGame();\n      return;\n    }\n\n    if (noLives) {\n      // вывод результатов закончились жизни\n      this.stopGame();\n      return;\n    }\n\n    this.model.nextLevel(); // следующий уровень\n\n    this.gameScreen(nextLevelGameData);\n    renderScreen(this.screen.element);\n    this.tickTimer(); // запуск таймера\n  }\n}\n"],"file":"game-screen.js"}